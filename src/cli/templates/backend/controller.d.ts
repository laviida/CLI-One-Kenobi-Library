export declare const controller = "import { [entity]Service } from '@application/[filename]/[filename].service';\nimport { ExceptionFilter } from '@core/exceptions/global.exception';\nimport { TransformInterceptor } from '@core/response/success.response';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseFilters,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { JwtUserGuard } from '@core/middlewares/jwt/user/jwt-user.guard';\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Create[entity]Dto } from './dto/create-[filename].dto';\nimport { Update[entity]Dto } from './dto/update-[filename].dto';\nimport { [entity] } from './entities/[filename].entity';\n\n@Controller('[filename]')\n@ApiTags('[entity]')\n@UseFilters(ExceptionFilter)\n@UseGuards(JwtUserGuard)\n@UseInterceptors(TransformInterceptor)\n@ApiUnauthorizedResponse({\n  description: 'Bearer token must be a valid Token',\n})\nexport class [entity]Controller {\n  constructor(private readonly [filename]Service: [entity]Service) {}\n\n  @Get(':id')\n  @ApiBearerAuth()\n  @ApiParam({\n    name: 'id',\n    type: String,\n    description: 'Unique identifier of the [filename]',\n  })\n  @ApiOperation({ summary: 'Gets a [filename] by given id' })\n  @ApiOkResponse({\n    type: [entity],\n    description: 'Retrieves [filename] data',\n  })\n  @ApiResponse({\n    description: 'There is no [filename] with the given id',\n    status: HttpStatus.NOT_FOUND,\n  })\n  get(@Param('id', ParseIntPipe) id: number) {\n    return this.[filename]Service.find({\n      where: {\n        id,\n      },\n      limit: 1,\n      orFail: true,\n    });\n  }\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Gets all [filename]' })\n  @ApiOkResponse({\n    type: Array<[entity]>,\n    isArray: true,\n    description: 'Retrieves an array of [filename]',\n  })\n  getAll() {\n    return this.[filename]Service.find();\n  }\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Saves an [filename]' })\n  @ApiBody({ type: Create[entity]Dto })\n  @ApiResponse({\n    status: HttpStatus.BAD_REQUEST,\n    description: 'The request sent to the server is invalid or corrupted',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    type: [entity],\n    description: 'Retrieves a saved [filename]',\n  })\n  save(\n    @Body()\n    [filename]Dto: Create[entity]Dto,\n  ) {\n    return this.[filename]Service.create([filename]Dto);\n  }\n\n  @Put()\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Updates a [filename]' })\n  @ApiBody({ type: Update[entity]Dto })\n  @ApiOkResponse({\n    type: [entity],\n    description: 'Retrieves an updated [filename]',\n  })\n  @ApiResponse({\n    status: HttpStatus.BAD_REQUEST,\n    description: 'The request sent to the server is invalid or corrupted',\n  })\n  update(\n    @Body()\n    [filename]Dto: Update[entity]Dto,\n  ) {\n    return this.[filename]Service.update([filename]Dto);\n  }\n\n  @Delete(':id')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Deletes a [filename]' })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    description: 'Unique identifier of the [filename]',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Chassis successfully deleted',\n  })\n  delete(@Param('id', ParseIntPipe) id: number) {\n    return this.[filename]Service.remove(id);\n  }\n}\n";
